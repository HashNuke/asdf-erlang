#!/usr/bin/env bash

export KERL_BUILD_DOCS="${KERL_BUILD_DOCS:-yes}"

set -e



# shellcheck source=../lib/utils.sh
source "$(dirname $0)/../lib/utils.sh"
ensure_kerl_setup


install_erlang() {

  if [ -z "$OTP_GITHUB_URL" ] && [ "$ASDF_INSTALL_TYPE" = "version" ] && [ -z "$KERL_CONFIGURE_OPTIONS"] && [ -z "$ASDF_ERLANG_FROM_SOURCE" ] && os_name="$(get_macos_marketing_name)"; then
    if download_url="$(macos_get_download_url $os_name)"; then
      macos_install_from_prebuilt "$download_url"
    else
      printf 'Fallback to building from source. \n'
      install_from_source
    fi
  else
    install_from_source
  fi
}



macos_install_from_prebuilt() {
  macos_check_homebrew_setup

  mkdir -p "$ASDF_INSTALL_PATH"
  mkdir -p "$ASDF_DOWNLOAD_PATH"

  local download_url="$1"

  printf 'Downloading %s. \n' "$download_url"
  # Strip "erlang/23.3" folder structure off the tarball when extracting.
  curl -L "$download_url" | tar xf - --directory="$ASDF_DOWNLOAD_PATH" --strip-components=2

  # We're not keeping the same directory structure as Homebrew.
  local replacement_pattern="@@HOMEBREW_CELLAR@@/erlang/$ASDF_INSTALL_VERSION/lib/erlang"

  # Replace the homebrew URL with something compatible with asdf
  grep -rl --null "$replacement_pattern" "$ASDF_DOWNLOAD_PATH/lib/erlang" | xargs -0 sed -i '' "s:$replacement_pattern:$ASDF_INSTALL_PATH:g"

  local linked_libs=(
      "$ASDF_DOWNLOAD_PATH/lib/erlang/lib/"crypto-*"/priv/lib/crypto.so"
      "$ASDF_DOWNLOAD_PATH/lib/erlang/lib/"wx-*"/priv/wxe_driver.so"
    )

  # Link Crypto & Wx to brew prefix
  macos_update_linked_paths "${linked_libs[@]}"

  # Move from download to install
  # In the future, maybe copy would be better, but I think keeping downloads is a bad design.
  mv -f "$ASDF_DOWNLOAD_PATH/lib/erlang/"* "$ASDF_INSTALL_PATH"
}


install_from_source() {
  printf 'Building version %s %s for from source' "$(plugin_name)" "$ASDF_INSTALL_VERSION"
  if [ "$KERL_BUILD_DOCS" != "yes" ]; then
    unset KERL_BUILD_DOCS
    printf ' without documentation. \n'
  else
    printf ' with documentation. \n'
  fi

  if [ -z "$KERL_CONFIGURE_OPTIONS" ]; then
    printf 'KERL_CONFIGURE_OPTIONS is not set, will use default settings. \n'

    export KERL_CONFIGURE_OPTIONS="--disable-debug --disable-silent-rules --enable-dynamic-ssl-lib"
    export KERL_CONFIGURE_OPTIONS="$KERL_CONFIGURE_OPTIONS --enable-hipe --enable-sctp --enable-shared-zlib --enable-smp-support"
    export KERL_CONFIGURE_OPTIONS="$KERL_CONFIGURE_OPTIONS --enable-threads --enable-wx --without-javac"

    if [ "$(uname -s)" = "Darwin" ]; then
        macos_check_homebrew_setup "SOURCE"
        export KERL_CONFIGURE_OPTIONS="$KERL_CONFIGURE_OPTIONS --with-ssl=$(brew --prefix openssl) --enable-darwin-64bit --enable-kernel-poll --with-dynamic-trace=dtrace"
    fi
  fi


  printf 'With KERL_CONFIGURE_OPTIONS set to: \n %s \n' "$KERL_CONFIGURE_OPTIONS"


  local build_name="asdf_$ASDF_INSTALL_VERSION"

  export MAKEFLAGS="-j$ASDF_CONCURRENCY"


  if [ "$ASDF_INSTALL_TYPE" = "ref" ]; then
    $(kerl_executable) build git "${OTP_GITHUB_URL:-https://github.com/erlang/otp.git}" "$ASDF_INSTALL_VERSION" "$build_name"
  else
    $(kerl_executable) build "$ASDF_INSTALL_VERSION" "$build_name"
  fi

  $(kerl_executable) install "$build_name" "$ASDF_INSTALL_PATH"

  if [ -z "${ASDF_KERL_BASE_DIR:-}" ]; then
    rm -rf "$KERL_BASE_DIR"
  fi

}


install_erlang
